Dopo aver creato la Nav e tutto per far animare il bottone e mostrare la lista dei link disponibili, siamo andati nella pagina Home nella cartella PAGES e abbiamo creato una state variable che parte da false, poi siamo andati a definire la set function nella quale abbiamo passato !isOpen il quale sta a significare che deve fare un toggle da true a false e viceversa ogni volta che clicchiamo. Passiamo i valori della state variable al componente SIDEBAR e alla NAVBAR passiamo solo la toggle function. Poi siamo andati nella index della cartella NAVBAR ed abbiamo passato al click il toggle e lo abbiamo destrutturizzato.  Poi siamo andati nella cartella SIDEBAR e al componente SIDEBARCONTAINER abbiamo passato isOpen su isOpen e al click passiamo toggle. Mentre al componente ICON passiamo toggle al click, e passiamo questo anche a tutti gli altri SidebarLink e andiamo a destrutturizzare isOpen e toggle. 

Quando andiamo a creare la Hero section, dopo aver fatto tutto il CSS,  nell'index della cartella HeroSection, alla fine andiamo a creare una statevariable di hover e la andiamo a definire la funzione e passiamo nella set function !hover e lo passiamo nell'elemento button sul mouseleave e mousenter. Poi nel button creiamo un ternary con hover e passiamo 2 icone se siamo in hover o no.

Nella cartella info section e file infoElemets siamo andati a creare un componente styled di InfoRow, grazie a questo elemento abbiamo creato 2 box dove in un lato abbiamo inserito il testo e da un lato abbiamo inserito l'immagine.

Dopo aver creato anche il footer andiamo a fare un'altra cosa.
Quando scrolliamo sotto con la pagina vediamo che la navbar scompare ma ci rimangono le scritte in bianco, per ovviare a questo e rendere la navbar con le scritte sempre presente anche quando scendiamo, andiamo nella cartella della NAVBAR e in index andiamo a creare una state variable la quale parte da false. Andiamo a definire la set function, dove settiamo con un IF nel quale diciamo che se sul display scrolliamo sull'asse delle y per maggiore o uguale di 80px settiamo la setter functioc su true altrimenti su false. Poi andiamo a fare uno useEffect dove al window aggiungiamo un event listener nel quale specifichiamo l'azione di scroll e passiamo la setter function. Poi passiamo al componente NAV un prop con il valore della state variable. Poi andiamo nella navbar elements e nel backGround passiamo un ternary che passa lo stesso nome della stateVariable dove diciamo se vero diventa nero se falso trasparente.


Ora mettiamo caso che siamo in fondo alla pagina e vogliamo risalire fin sopra toccando l'icona nella nav. Per fare ciò utilizziamo la libreria di react scroll. Nel file sempre nelle Cartella NAVBAR andiamo a passare a NavLogo un prop dove al click passiamo una funzione, ora andiamo a definire questa funzione dove passiamo un metodo che ci fornisce la libreria react scroll ed è scroll.scrollToTop(). Andiamo ad importarer animateScroll ad scroll dalla libreria react scroll. 


Ora quando andiamo ad esempio a cliccare sul link About vediamo che in un istante ci porta alla sezione collegata, ma se vogliamo che scenda in maniera più lenta e controllata, andiamo sempre nel file della NAVBAR, e nel componente NAVLINKS andiamo a passare dei props, che sono smooth, duration, exact, offset, spy. Tutti props che passa la libreria react-scroll. 
A questo componente possiamo passare anche il prop activeClass con active e andiamo nel CSS e possiamo cambiare colore a questo componente o ciò che vogliamo. Ma noi tutto ciò lo facciamo già quando andiamo nello styled component e quando andiamo a stilizzare il componente NavLink andiamo a passare &:active  lo stiamo già facendo.
Ma potremmo usare l'activeClass quando abbiamo uno stock components.  